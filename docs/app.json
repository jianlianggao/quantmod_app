[{"name":"app.R","content":"library(shiny)\nlibrary(plotly)\nlibrary(dplyr)\n\n# initial data for plotly\n#data=read.csv(\"../data/AAPL.csv\", stringsAsFactors = F)\n\n\n# Define UI\nui <- fluidPage(\n  titlePanel(\"Stock Price\"),\n  sidebarLayout(\n    sidebarPanel(\n      textInput(\"ticker\", \"Enter Ticker Symbol:\", value = \"AAPL\"),\n      actionButton(\"submit\", \"Submit\")\n      #textInput(\"research\", \"Your research:\"),\n      #actionButton(\"calculate\", \"Calculate Similarity\"),\n      #verbatimTextOutput(\"result\")\n    ),\n    mainPanel(\n      plotlyOutput(\"combinedPlot\")\n      \n    )\n  )\n)\n\n\nserver <- function(input, output, session) {\n  stockData <- eventReactive(input$submit, {\n    ticker <- input$ticker\n    read.csv(paste0(\"../data/\", ticker, \".csv\"))\n    #data <- data %>% data.frame()\n    #print(head(data))\n    #data$Date <- as.Date(data$Date)\n    #print(head(data))\n  })\n  \n  output$combinedPlot <- renderPlotly({\n    data <- as.data.frame(stockData())\n    req(data)\n    data$Date <- as.Date(data$Date)\n    ticker <- input$ticker\n    #data <- data %>% data.frame()\n    #print(head(data))\n    \n    # Create the candlestick plot\n    candlestick <- plot_ly(data, x = ~Date, type = \"candlestick\",\n                           open = ~data[[paste0(ticker, \".Open\")]], \n                           high = ~data[[paste0(ticker, \".High\")]], \n                           low = ~data[[paste0(ticker, \".Low\")]], \n                           close = ~data[[paste0(ticker, \".Close\")]],\n                           name = \"Candlestick\")\n    \n    # Create the volume plot\n    volume <- plot_ly(data, x = ~Date, y = ~data[[paste0(ticker, \".Volume\")]], type = 'bar', name = 'Volume', yaxis = \"y2\")\n    \n    # Combine the plots\n    subplot(candlestick, volume, nrows = 2, shareX = TRUE) %>%\n      layout(title = paste(\"Candlestick and Volume Chart for\", ticker),\n             yaxis = list(title = \"Price\"),\n             yaxis2 = list(title = \"Volume\", overlaying = \"y\", side = \"right\"))\n   })   \n    # Trigger initial rendering\n    observe({\n      updateTextInput(session, \"ticker\", value = \"AAPL\")\n    })\n\n}\n\nshinyApp(ui, server)\n","type":"text"},{"name":"myapp.Rproj","content":"Version: 1.0\n\nRestoreWorkspace: Default\nSaveWorkspace: Default\nAlwaysSaveHistory: Default\n\nEnableCodeIndexing: Yes\nUseSpacesForTab: Yes\nNumSpacesForTab: 2\nEncoding: UTF-8\n\nRnwWeave: Sweave\nLaTeX: pdfLaTeX\n","type":"text"},{"name":"tofetch.txt","content":"AAPL\n","type":"text"}]
