[{"name":"app.R","content":"#\n# This is a Shiny web application. You can run the application by clicking\n# the 'Run App' button above.\n#\n# Find out more about building applications with Shiny here:\n#\n#    https://shiny.posit.co/\n#\n\nlibrary(shiny)\n#library(quantmod)\n\n# Define UI for application that draws a histogram\nui <- fluidPage(\n\n    # Application title\n    titlePanel(\"Stock Price\"),\n\n    # Sidebar with a slider input for number of bins \n    sidebarLayout(\n        sidebarPanel(\n          textInput(\"ticker\", \"Enter Stock Ticker Symbol:\", value = \"AAPL\"),\n          dateRangeInput(\"dateRange\", \"Select Date Range:\",\n                          start = Sys.Date() - 30, end = Sys.Date()),\n          actionButton(\"goButton\", \"Go\")\n          #verbatimTextOutput(\"result\")\n        ),\n\n        # Show a plot of the generated distribution\n        mainPanel(\n           #plotOutput(\"distPlot\")\n          fluidRow(\n            column(6, plotOutput(\"distPlot\"))\n          ),\n          fluidRow(\n            column(12, tableOutput(\"stock_data\"))\n          )\n        )\n    )\n)\n\n# Define server logic required to draw a histogram\nserver <- function(input, output, session) {\n  library(quantmod)\n  library(knitr)\n  output$message <- renderText({\n    data <- getSymbols(input$ticker, src = \"yahoo\",\n                       from = input$dateRange[1], to = input$dateRange[2],\n                       auto.assign = FALSE)\n    kable(head(data), caption = paste(input$ticker, \"preview\"))\n  })\n  stockData <- eventReactive(input$goButton, {\n    \n    getSymbols(input$ticker, src = \"yahoo\",\n                from = input$dateRange[1], to = input$dateRange[2],\n                auto.assign = FALSE)\n   })\n  \n  output$stock_data <- renderTable({\n    data <- stockData()\n    if (is.null(data)) {\n      return(data.frame(Message = \"Invalid ticker symbol or data not available.\"))\n    }\n    head(data)\n  })\n\n     output$distPlot <- renderPlot({\n       \n        data <- stockData()\n        # Pre-fetch data and save as CSV\n      \n        write.csv(data, \"data.csv\")\n        \n        #req(data)\n        chartSeries(data, name = paste(input$ticker, \"Price\") )\n        addBBands()\n     })\n  \n  # Trigger initial rendering\n  observe({\n    updateTextInput(session, \"ticker\", value = \"AAPL\")\n    \n  })\n}\n\n# Run the application \nshinyApp(ui = ui, server = server)\n","type":"text"},{"name":"data.csv","content":"\"\",\"AAPL.Open\",\"AAPL.High\",\"AAPL.Low\",\"AAPL.Close\",\"AAPL.Volume\",\"AAPL.Adjusted\"\n\"1\",225.229995727539,229.75,224.830001831055,229.539993286133,33591100,229.539993286133\n\"2\",227.779998779297,229.5,227.169998168945,229.039993286133,28183500,229.039993286133\n\"3\",229.300003051758,229.410003662109,227.339996337891,227.550003051758,31759200,227.550003051758\n\"4\",228.699996948242,231.729995727539,228.600006103516,231.300003051758,39882100,231.300003051758\n\"5\",233.610000610352,237.490005493164,232.369995117188,233.850006103516,64751400,233.850006103516\n\"6\",231.600006103516,232.119995117188,229.839996337891,231.779998779297,34082200,231.779998779297\n\"7\",233.429992675781,233.850006103516,230.520004272461,232.149993896484,32993800,232.149993896484\n\"8\",236.179992675781,236.179992675781,234.009994506836,235,46431500,235\n\"9\",234.449996948242,236.850006103516,234.449996948242,236.479995727539,36254500,236.479995727539\n\"10\",233.889999389648,236.220001220703,232.600006103516,235.860000610352,38846600,235.860000610352\n\"11\",234.080001831055,235.139999389648,227.759994506836,230.759994506836,52287000,230.759994506836\n\"12\",229.979995727539,230.820007324219,228.410003662109,230.570007324219,31109500,230.570007324219\n\"13\",229.740005493164,233.220001220703,229.570007324219,231.410003662109,38802300,231.410003662109\n\"14\",233.320007324219,234.729995727539,232.550003051758,233.399993896484,36087100,233.399993896484\n\"15\",233.100006103516,234.330001831055,232.320007324219,233.669998168945,35417200,233.669998168945\n\"16\",232.610000610352,233.470001220703,229.550003051758,230.100006103516,47070900,230.100006103516\n\"17\",229.339996337891,229.830001831055,225.369995117188,225.910003662109,64370100,225.910003662109\n\"18\",220.970001220703,225.350006103516,220.270004272461,222.910003662109,65276700,222.910003662109\n\"19\",220.990005493164,222.789993286133,219.710006713867,222.009994506836,44944500,222.009994506836\n\"20\",221.800003051758,223.949996948242,221.139999389648,223.449996948242,28111300,223.449996948242\n\"21\",222.610000610352,226.070007324219,221.190002441406,222.720001220703,54561100,222.720001220703\n\"22\",224.630004882812,227.880004882812,224.570007324219,227.479995727539,42083800,227.479995727539\n","type":"text"},{"name":"myapp.Rproj","content":"Version: 1.0\n\nRestoreWorkspace: Default\nSaveWorkspace: Default\nAlwaysSaveHistory: Default\n\nEnableCodeIndexing: Yes\nUseSpacesForTab: Yes\nNumSpacesForTab: 2\nEncoding: UTF-8\n\nRnwWeave: Sweave\nLaTeX: pdfLaTeX\n","type":"text"}]
